#!/usr/bin/python
import csv,operator,os.path,argparse

def createCSVList(filePath,delimiter=","):
    reader = None
    try:
        csvFile = open(filePath,"r")
        reader = [x for x in csv.DictReader(csvFile,delimiter=delimiter)]
        csvFile.close()
    except csv.Error as e:
        print os.path.basename(filePath) + " does not exist" + " " + e
    return reader

def sortCSVList(csvList, column):
    return sorted(csvList,key=operator.itemgetter(column))

def nexpose_consolidateList(findingsList):
    pluginIDS = {}
    for dictionary in findingsList:
        if dictionary["Vulnerability Title"] not in pluginIDS.keys():
            pluginIDS[dictionary["Vulnerability Title"]] = dictionary
            pluginIDS[dictionary["Vulnerability Title"]]["Asset IP Address"] = [dictionary["Asset IP Address"] + ":" + dictionary["Service Port"] + "/" + dictionary["Service Protocol"]]
        else:
            pluginIDS[dictionary["Vulnerability Title"]]["Asset IP Address"].append(dictionary["Asset IP Address"] + ":" + dictionary["Service Port"] + "/" + dictionary["Service Protocol"])
    return pluginIDS

def nexpose_produceOutput(reader, format):
   l = nexpose_consolidateList(reader)
   categoryDict = {"Critical":"", "High":"","Medium":"","Low":""}
   for line in l.keys():
      if l[line]["Vulnerability CVSS Score"] > 0:
        try:
            l[line]["Vulnerability CVSS Score"] = float(l[line]["Vulnerability CVSS Score"])
        except:
            l[line]["Vulnerability CVSS Score"] = 5.0

        if float(l[line]["Vulnerability CVSS Score"]) == 10 and format.lower() == "crit":
            l[line]["NVD_Risk"] = "Critical"
        elif float(l[line]["Vulnerability CVSS Score"]) >= 7:
            l[line]["NVD_Risk"] = "High"
        elif float(l[line]["Vulnerability CVSS Score"]) >= 4:
                        l[line]["NVD_Risk"] = "Medium"
        else:
                        l[line]["NVD_Risk"] = "Low"
        ending = "\n"
        ips = ending.join(sorted(list(set(l[line]["Asset IP Address"]))))

        categoryDict[l[line]["NVD_Risk"]] += "*********************************************************************\n" + \
        l[line]["Vulnerability Title"] + ":\n\n" + \
            "CVSS Score: " + str("%.1f" % l[line]["Vulnerability CVSS Score"]) + "\n\n" + \
            "Description: \n\n" + l[line]["Vulnerability Description"] + "\n\n" + \
            "Proof: \n\n" + l[line]["Vulnerability Proof"] + "\n\n" + \
            ips + "\n" + \
            "*********************************************************************\n\n"
   if format.lower() == "crit":
        return crit_format(categoryDict)
   else:
        return high-only_format(categoryDict)

def nessus_consolidateList(findingsList):
    pluginIDS = {}
    for dictionary in findingsList:

        if dictionary["Plugin ID"] not in pluginIDS.keys():
            pluginIDS[dictionary["Plugin ID"]] = dictionary
            pluginIDS[dictionary["Plugin ID"]]["Host"] = [dictionary["Host"] + ":" + dictionary["Port"] + "/" + dictionary["Protocol"].upper()]
        else:
            pluginIDS[dictionary["Plugin ID"]]["Host"].append(dictionary["Host"] + ":" + dictionary["Port"] + "/" + dictionary["Protocol"].upper())
    return pluginIDS

def nessus_produceOutput(reader, format):
   l = nessus_consolidateList(reader)
   findingsList = ["Critical","High","Medium","Low"]
   categoryDict = {"Critical":"", "High":"","Medium":"","Low":""}
   for line in l.keys():
      if l[line]["Risk"] in findingsList:
         if format.lower() == "high-only":
            if l[line]["Risk"] == "Critical":
                l[line]["Risk"] = "High"
         ending = "\n"
         ips = ending.join(sorted(list(set(l[line]["Host"]))))
         categoryDict[l[line]["Risk"]] += "*********************************************************************\n" + \
            l[line]["Name"] + ":\n\n" + \
            "Risk: " + l[line]["Risk"] + "\n\n" + \
            "CVSS Score: " + l[line]["CVSS"] + "\n\n" + \
            "Description: " + l[line]["Description"] + "\n\n" + \
            "Remediation: " + l[line]["Solution"] + "\n\n" + \
               ips + "\n" + \
               "*********************************************************************\n"
         categoryDict[l[line]["Risk"]] += "\n"
   if format.lower() == "crit":
        return crit_format(categoryDict)
   else:
        return high-only_format(categoryDict)

def high-only_format(categoryDict):

   output ="#"*69 + "\n" + \
          "HIGHS".center(69) + "\n" + \
          "#"*69 + "\n\n" + \
          categoryDict["Critical"] + categoryDict["High"] + "\n\n" + \
          "#"*69 + "\n" + \
          "MEDIUMS".center(69) + "\n" + \
          "#"*69 + "\n\n" + \
          categoryDict["Medium"] + "\n\n" + \
          "#"*69 + "\n" + \
          "LOWS".center(69) + "\n" + \
          "#"*69 + "\n\n" + \
          categoryDict["Low"] + "\n\n"
   return output

def crit_format(categoryDict):
    output ="#"*69 + "\n" + \
             "CRITICALS".center(69) + "\n" + \
             "#"*69 + "\n\n" + \
             categoryDict["Critical"] + "\n\n" + \
            "#"*69 + "\n" + \
             "HIGHS".center(69) + "\n" + \
             "#"*69 + "\n\n" + \
             categoryDict["High"] + "\n\n" + \
             "#"*69 + "\n" + \
             "MEDIUMS".center(69) + "\n" + \
             "#"*69 + "\n\n" + \
             categoryDict["Medium"] + "\n\n" + \
             "#"*69 + "\n" + \
             "LOWS".center(69) + "\n" + \
             "#"*69 + "\n\n" + \
             categoryDict["Low"] + "\n\n"
    return output

#def produce_banner(engagement_name, format):

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", help="Designates path to csv file to be parsed.")
    parser.add_argument("-d", help="Designates delimiter.")
    parser.add_argument("-o", "--output", help="Designates file to write output to.")
    parser.add_argument("-l", "--file_list", help="Designates path to file with list of CSVs to parse")
    parser.add_argument("-fm", "--format", help="Select from the following formats: 'crit'; 'high-only'")
    parser.add_argument("-s", "--scanner", help="select one of the following scanners: 'nessus', 'nexpose', 'both'")
    args = parser.parse_args()
    reader = []
    formats = ["crit","high-only"]
    if args.d == None:
        args.d = ","
    if args.format.lower() not in formats:
        print "The format '%s' is not supService Ported" % args.format
    else:
        if args.file_list != None:
            f = open(args.file_list,"r")
            file_list = [x.strip() for x in f.readlines()]
            for files in file_list:
                print files
                reader += createCSVList(files, args.d)
        else:
            reader = createCSVList(args.f, args.d)

        if args.output != None:
            with open(args.output,"w") as f:
                if args.scanner == "nessus":
                    f.write(nessus_produceOutput(reader, args.format))
                else:
                    f.write(nexpose_produceOutput(reader, args.format))
        else:
            if args.scanner == "nessus":
                    print nessus_produceOutput(reader, args.format)
            else:
                    print nexpose_produceOutput(reader, args.format)

